# -*- coding: utf-8 -*
#
# This file is part of CANDrive.
#
# CANDrive is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# CANDrive is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with CANDrive.  If not, see <http://www.gnu.org/licenses/>.

import os

Import(['*'])

test_env = Environment(
    tools=['default', 'coverage', 'candb', 'compilation_db', 'converter'],
    CC='gcc',
    CCFLAGS=['-g', '-O0', '-std=c17'],
    CPPPATH=['#src/libopencm3/include'],
    CPPDEFINES=['STM32F1', 'UNIT_TEST', 'BAUD_RATE=921600', 'NAME=\\"Test\\"'],
    LIBS=['cmocka', 'gcov']
)

mocks = []
unit_env = test_env.Clone()
mock_dir = os.path.join('#', 'build', 'test', 'mocks')
mock_sconscript_file = os.path.join('mocks', 'SConscript')
mock_objects = SConscript(mock_sconscript_file,
            variant_dir=mock_dir,
            duplicate=0,
            exports={'env': unit_env})
mocks.append(mock_objects)


modules_sc =  Glob('../modules/*/SConscript')
modules_sc.extend(Glob('../app/*/SConscript'))
modules_mock_sc = Glob('../modules/*/test/mock/SConscript')


for module in modules_mock_sc:
    unit_env = test_env.Clone()

    module_name = os.path.dirname(str(module)).split('/')[-3]
    mock_dir = os.path.join('#', 'build', 'test', module_name, 'mock')

    mock_object = SConscript(module,
        variant_dir=mock_dir,
        duplicate=0,
        exports={'env': unit_env})
    mocks.append(mock_object)



tests = []
for module in modules_sc:
    unit_env = test_env.Clone()

    unit_env.Append(CCFLAGS='--coverage')
    unit_env.Append(CPPPATH='#src/test/mocks')

    module_name = os.path.basename(module.dir.name)
    module_dir = os.path.join('#', 'build', 'test', module_name, 'module')

    module_object = SConscript(module,
        variant_dir=module_dir,
        duplicate=0,
        exports={'env': unit_env})

    coverage_file = os.path.join(module_dir, f'{module_name}.gcno')
    Clean(module_object, coverage_file)

    unit_test_dir = os.path.join('#', 'build', 'test', module_name, 'test')
    unit_test_sconscript_file = os.path.join('../..', module.dir.path, 'test', 'SConscript')


    if os.path.isfile(unit_test_sconscript_file):
        unit_test_object = SConscript(unit_test_sconscript_file,
            variant_dir=unit_test_dir,
            duplicate=0,
            exports={'env': unit_env})

        runner_name = os.path.join('#', 'build', 'test', module_name, 'TestRunner')
        runner = unit_env.Program(target=runner_name, source=[unit_test_object, module_object, mocks])
        tests.append(runner)

test_runner = test_env.Coverage(source=tests, target='test-runner')
converter = test_env.Converter(source=test_runner, target='report.xml')

Return('converter')
