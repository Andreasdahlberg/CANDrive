# -*- coding: utf-8 -*
#
# This file is part of CANDrive.
#
# CANDrive is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# CANDrive is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with CANDrive.  If not, see <http://www.gnu.org/licenses/>.

__author__ = 'andreas.dahlberg90@gmail.com (Andreas Dahlberg)'

import os

PROJECT_NAME = 'CANDrive'

config_variables = Variables('config.py')
config_variables.Add('OPTIMIZATION', 'The optimization level to use for compilation(0, 1, 2, 3, s, g)', 'g')
config_variables.Add('STD', 'The C Dialect to use', 'c17')
config_variables.Add('SERIAL_PORT', 'Serial port')
config_variables.Add('BAUD_RATE', 'Baud rate for the serial port')
config_variables.Add('SOFTWARE_VERSION', 'Semantic software version', '0.0.0')

cflags = [
    '-mcpu=cortex-m3',
    '-mthumb',
    '-O${OPTIMIZATION}',
    '-g',
    '-Wall',
    '-Wextra',
    '-Wshadow',
    '-Wformat=2',
    '-Wformat-overflow',
    '-Wformat-truncation',
    '-fno-common',
    '-std=${STD}',
    '-fdata-sections',
    '-ffunction-sections'
]

ldflags = [
    '-nostartfiles',
    '-mcpu=cortex-m3',
    '-mthumb',
    '-specs=nano.specs',
    '-Wl,--gc-sections'
]

env = Environment(
    tools=['default', 'hex', 'bin', 'candb', 'compilation_db'],
    variables = config_variables,
    CC='arm-none-eabi-gcc',
    AR='arm-none-eabi-ar',
    STRIP='arm-none-eabi-strip',
    CFLAGS=cflags,
    CPPDEFINES=['STM32F1', 'BAUD_RATE=${BAUD_RATE}', 'SOFTWARE_VERSION=\\"${SOFTWARE_VERSION}\\"'],
    LINKFLAGS=ldflags
)

TERM = os.getenv('TERM')
if TERM:
    env['ENV']['TERM'] = TERM

app_env = env.Clone()
app, hex, bin = env.SConscript('src/SConscript',
                          duplicate=0,
                          variant_dir='build/app/',
                          exports={'env': app_env, 'project_name': PROJECT_NAME, 'target': 'app'})

bootloader_env = env.Clone()
bootloader, hex_bootloader = env.SConscript('src/SConscript',
                                            duplicate=0,
                                            variant_dir='build/bootloader/',
                                            exports={'env': bootloader_env, 'project_name': PROJECT_NAME, 'target': 'bootloader'})

Help('Common\n')
env.Command('serial', '', 'minicom -D ${SERIAL_PORT} -b ${BAUD_RATE} -t linux')
Help('serial: Display serial output from the device.\n')

env.Command('monitor', app, '../scripts/monitor.py ${SERIAL_PORT} ${SOURCE} -b ${BAUD_RATE}')
Help('monitor: Display formatted output from the device.\n')

env.Command("format", None, 'astyle --options=.astylerc --recursive src/*.c src/*.h --exclude=src/libopencm3')
Help('format: Format all source files.\n')

compdb = env.CompilationDatabase()
Alias('compdb', compdb)
Help('compdb: Generate a compilation database.\n')

env.Command("gdb-server", None, 'st-util -m -n')
Help('gdb-server: Start a GDB server.\n')

env.Command('libopencm3_stm32f1.a', '', 'cd src/libopencm3 && make TARGETS=stm32/f1 -j{}'.format(GetOption('num_jobs')))
Alias('build-opencm3', 'libopencm3_stm32f1.a')
Help('build-opencm3: Build the opencm3 library.\n')

env.Alias('release', [app, hex, bin])
Help('release: Create an application release.\n')

Help('\nApplication\n')
env.Alias('build', app)
Help('build: Build application.\n')

flash = Command('flash', bin, 'st-flash --reset write {} 0x8008000'.format('${SOURCE}'))
Help('flash: Flash application to target.\n')

env.Command('size', app, 'arm-none-eabi-size {}'.format('${SOURCE}'))
Help('size: Display the application size.\n')

env.Command("gdb", app, 'gdb-multiarch ${SOURCE} --eval-command="target remote localhost:4242"')
Help('gdb: Start GDB and attach to target.\n')

env.Alias('release-boot', [bootloader, hex_bootloader])
Help('release-boot: Create a bootloader release.\n')

Help('\nBootloader\n')
env.Alias('build-boot', bootloader)
Help('build-boot: Build bootloader.\n')

flash_boot = Command('flash-boot', hex_bootloader, 'st-flash --reset --format ihex write {}'.format('${SOURCE}'))
Help('flash-boot: Flash bootloader to target.\n')

env.Command('size-boot', bootloader, 'arm-none-eabi-size {}'.format('${SOURCE}'))
Help('size-boot: Display the bootloader size.\n')

env.Command("gdb-boot", bootloader, 'gdb-multiarch ${SOURCE} --eval-command="target remote localhost:4242"')
Help('gdb-boot: Start GDB and attach to target.\n')

tests = env.SConscript('src/test/SConscript')
env.Alias('test', tests)
