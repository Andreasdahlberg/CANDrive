# -*- coding: utf-8 -*
#
# This file is part of CANDrive.
#
# CANDrive is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# CANDrive is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with CANDrive.  If not, see <http://www.gnu.org/licenses/>.

__author__ = 'andreas.dahlberg90@gmail.com (Andreas Dahlberg)'

import os
import sys

PROJECT_NAME = 'CANDrive'

config_variables = Variables('config.py')
config_variables.Add('OPTIMIZATION', 'The optimization level to use for compilation(0, 1, 2, 3, s, g)', 'g')
config_variables.Add('STD', 'The C Dialect to use', 'c17')
config_variables.Add('SERIAL_PORT', 'Serial port')
config_variables.Add('BAUD_RATE', 'Baud rate for the serial port')

cflags = [
    '-mcpu=cortex-m3',
    '-mthumb',
    '-O${OPTIMIZATION}',
    '-g',
    '-Wall',
    '-Wextra',
    '-std=${STD}',
]

ldflags = [
    '-nostartfiles',
    '-Tapp/stm32f103rb.ld',
    '-mcpu=cortex-m3',
    '-mthumb',
    '-specs=nano.specs',
]

env = Environment(
    tools=['default', 'hex', 'candb', 'compilation_db'],
    variables = config_variables,
    CC='arm-none-eabi-gcc',
    AR='arm-none-eabi-ar',
    STRIP='arm-none-eabi-strip',
    CFLAGS=cflags,
    CPPDEFINES=['STM32F1', 'BAUD_RATE=${BAUD_RATE}'],
    LINKFLAGS=ldflags
)

TERM = os.getenv('TERM')
if TERM:
    env['ENV']['TERM'] = TERM

app, hex = env.SConscript('app/SConscript',
                      duplicate=0,
                      variant_dir='build/',
                      exports={'env': env, 'project_name': PROJECT_NAME})

env.Alias('build', app)
Help('build: Build application.\n')

env.Command('libopencm3_stm32f1.a', '', 'cd libopencm3 && make TARGETS=stm32/f1 -j{}'.format(GetOption('num_jobs')))
Alias('build-opencm3', 'libopencm3_stm32f1.a')
Help('build-opencm3: Build the opencm3 library.\n')

flash = Command('flash', hex, 'st-flash --format ihex write {}'.format('${SOURCE}'))
Help('flash: Flash application to target.\n')

compdb = env.CompilationDatabase()
Alias('compdb', compdb)
Help('compdb: Generate a compilation database.\n')

env.Command('size', app, 'arm-none-eabi-size {}'.format('${SOURCE}'))
Help('size: Display the application size.\n')

env.Command('serial', '', 'minicom -D ${SERIAL_PORT} -b ${BAUD_RATE} -t linux')
Help('serial: Display serial output from the device.\n')

env.Command("format", None, 'astyle --options=.astylerc --recursive app/*.c app/*.h')
Help('format: Format all source files.\n')

env.Command("gdb-server", None, 'st-util -m -n')
Help('gdb: Start a GDB server.\n')

env.Command("gdb", app, 'gdb-multiarch ${SOURCE} --eval-command="target remote localhost:4242"')
Help('gdb: Start GDB and attach to target.\n')
