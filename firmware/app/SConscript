# -*- coding: utf-8 -*
#
# This file is part of CANDrive.
#
# CANDrive is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# CANDrive is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with CANDrive.  If not, see <http://www.gnu.org/licenses/>.

import os

Import(['*'])

MODULES = [
    'main',
    'fault_handler',
    'syscalls',
    'logging',
    'candb',
    'can_interface',
    'fifo',
    'utility',
    'serial',
    'pwm',
    'motor',
    'adc',
    'systime',
    'board',
    'console',
    'filter',
    'pid',
    'motor_controller'
]

module_objects = []

env.Append(CPPPATH=[
    '#libopencm3/include'
])

for module in MODULES:
    sconscript_file = os.path.join(module, 'SConscript')

    module_object = SConscript(sconscript_file, exports='env')
    module_objects.append(module_object)


env.Append(LIBPATH = '#libopencm3/lib/')
env.Append(LIBS =[
    '-lc',
    '-lgcc',
    '-lnosys',
    'libopencm3_stm32f1.a'
])

app = env.Program('application.elf', module_objects)
hex = env.Hex('application.hex', app)

test_env = Environment(
    tools=['default', 'coverage', 'compilation_db'],
    CC='gcc',
    CCFLAGS=['-g', '-O0', '-std=c17'],
    CPPPATH=['#libopencm3/include'],
    CPPDEFINES=['STM32F1', 'UNIT_TEST'],
    LIBS=['cmocka', 'gcov']
)

mocks = []
unit_env = test_env.Clone()
mock_dir = os.path.join('test', 'mocks', 'test')
mock_sconscript_file = os.path.join('test', 'mocks', 'SConscript')
mock_object = SConscript(mock_sconscript_file,
            variant_dir=mock_dir,
            duplicate=0,
            exports={'env': unit_env})
mocks.append(mock_object)

for module in MODULES:
    unit_env = test_env.Clone()
    if os.path.isfile(os.path.join(Dir('.').srcnode().abspath, module, 'test', 'mock', 'SConscript')):
        mock_dir = os.path.join(module, 'test', 'mock', 'test')
        mock_sconscript_file = os.path.join(module, 'test', 'mock', 'SConscript')
        mock_object = SConscript(mock_sconscript_file,
            variant_dir=mock_dir,
            duplicate=0,
            exports={'env': unit_env})
        mocks.append(mock_object)

tests = []
for module in MODULES:
    unit_env = test_env.Clone()

    if os.path.isfile(os.path.join(Dir('.').srcnode().abspath, module, 'test', 'SConscript')):
        unit_test_dir = os.path.join(module, 'test', 'test')
        unit_test_sconscript_file = os.path.join(module, 'test', 'SConscript')
        unit_test_object = SConscript(unit_test_sconscript_file,
            variant_dir=unit_test_dir,
            duplicate=0,
            exports={'env': unit_env})

        unit_env.Append(CCFLAGS='--coverage')
        unit_env.Append(CPPPATH='#app/test/mocks')

        module_dir = os.path.join(module, 'test', 'module')
        module_sconscript_file = os.path.join(module, 'SConscript')
        module_object = SConscript(module_sconscript_file,
            variant_dir=module_dir,
            duplicate=0,
            exports={'env': unit_env})

        runner_name = os.path.join(module, 'test', 'TestRunner')
        runner = unit_env.Program(target=runner_name, source=[unit_test_object, module_object, mocks])
        tests.append(runner)

test_runner = test_env.Coverage(source=tests, target='test-runner')
test_env.Alias('test', test_runner)

Return(['app', 'hex'])
